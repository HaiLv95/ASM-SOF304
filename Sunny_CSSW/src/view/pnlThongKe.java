package view;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sunnycss.MODEL.HoaDon;
import sunnycss.MODEL.HoaDonCT;
import sunnycssw.DAO.ThongKeDAO;

/**
 *
 * @author hai95
 */
public class pnlThongKe extends javax.swing.JPanel {

    /**
     * Creates new form pnlThongKe
     */
    ThongKeDAO tkModel = new ThongKeDAO();
    List<HoaDon> listHD = new ArrayList<>();
    DefaultTableModel model;

    public pnlThongKe() {
        initComponents();
        setSize(840, 450);
        setPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdcNBD = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jdcNKT = new com.toedter.calendar.JDateChooser();
        btnTimKiem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblThongKe = new javax.swing.JTable();
        lblDoanhThu = new javax.swing.JLabel();
        lblTongSP = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(840, 450));

        jLabel1.setText("Ngày Bắt đầu");

        jLabel2.setText("Ngày kết thúc");

        btnTimKiem.setText("Tìm Kiếm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        tblThongKe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Ngày lập", "ID Hóa Đơn", "Người lập", "Số lượng SP", "Thành tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblThongKe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblThongKeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblThongKe);

        lblDoanhThu.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblDoanhThu.setText("Tổng doanh thu: 1200000 VND");

        lblTongSP.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTongSP.setText("Tổng sản phẩm bán: 23 sp");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDoanhThu, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTongSP, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 151, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jdcNBD, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jdcNKT, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jdcNKT, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jdcNBD, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoanhThu, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTongSP, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents
    public void setPanel() {
        model = (DefaultTableModel) tblThongKe.getModel();
        listHD = tkModel.loadListHD();
        loadHDtoTable(listHD);

    }
    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:
        findByDate();
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void tblThongKeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblThongKeMouseClicked
        // TODO add your handling code here:
        ChiTietHD();
    }//GEN-LAST:event_tblThongKeMouseClicked
    public void loadHDtoTable(List<HoaDon> listHD) {
        model.setRowCount(0);
        int tongsp = 0, doanhthu = 0;
        for (HoaDon hd : listHD) {
            model.addRow(new Object[]{hd.getNgayLapHD(), hd.getIdHD(), hd.getIdNV(), hd.getSoLuong(), hd.getThanhTien()});
            tongsp += hd.getSoLuong();
            doanhthu += hd.getThanhTien();
        }
        lblDoanhThu.setText("Tổng doanh thu: " + doanhthu + " VNĐ");
        lblTongSP.setText("Tổng sản phẩm đã bán: " + tongsp + " SP");
    }

    public void ChiTietHD() {
        int row = tblThongKe.getSelectedRow();
        int idHD = Integer.parseInt(tblThongKe.getValueAt(row, 1).toString());
        List<HoaDonCT> listCTHD = tkModel.getHoaDonCT(idHD);
        dg_ChiTietHD dgChiTietHD = new dg_ChiTietHD(Run.trangChu, true, listCTHD);
        dgChiTietHD.setVisible(true);
    }

    public boolean checkDate() {

        if (jdcNBD.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn ngày bắt đầu");
            return false;
        }
        if (jdcNKT.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn ngày kết thúc");
            return false;
        }
        if (jdcNBD.getDate().compareTo(jdcNKT.getDate()) > 0) {
            JOptionPane.showMessageDialog(this, "Ngày bắt đầu không được lớn hơn ngày kết thúc");
            return false;
        }
        return true;
    }

    public void findByDate() {
        if (jdcNBD.getDate() == null && jdcNKT.getDate() == null) {
            listHD = tkModel.loadListHD();
            loadHDtoTable(listHD);
        } else {

            if (!checkDate()) {
                return;
            }
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            listHD = tkModel.loadListHDbyDate(sdf.format(jdcNBD.getDate()), sdf.format(jdcNKT.getDate()));
            loadHDtoTable(listHD);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcNBD;
    private com.toedter.calendar.JDateChooser jdcNKT;
    private javax.swing.JLabel lblDoanhThu;
    private javax.swing.JLabel lblTongSP;
    private javax.swing.JTable tblThongKe;
    // End of variables declaration//GEN-END:variables
}
